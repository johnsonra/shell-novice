---
title: "Pipes and Filters"
format: revealjs
---

## Challenge 1

The file `shell-lesson-data/exercise-data/numbers.txt` contains the following lines:

```
10
2
19
22
6
```

:::: {.columns}

::: {.column}
If we run `sort` on this file, the output is:

```
10
19
2
22
6
```
:::

::: {.column}
If we run `sort -n` on the same file, we get this instead:

```
2
6
10
19
22
```
:::

::::

Explain why `-n` has this effect.


## Challenge 2

We have seen the use of `>`, but there is a similar operator `>>` which works slightly differently. We’ll learn about the differences between these two operators by printing some strings. We can use the `echo` command to print strings e.g.

```
$ echo The echo command prints text
The echo command prints text
```

Now test the commands below to reveal the difference between the two operators:

```
$ echo hello > testfile01.txt

$ echo hello >> testfile02.txt
```

Hint: Try executing each command twice in a row and then examining the output files.


## Challenge 3

We have already met the `head` command, which prints lines from the start of a file. `tail` is similar, but prints lines from the end of a file instead.

Consider the file `shell-lesson-data/exercise-data/animal-counts/animals.csv`. After these commands, what will be the contents of the file `animals-subset.csv`:

```
$ head -n 3 animals.csv > animals-subset.csv
$ tail -n 2 animals.csv >> animals-subset.csv
```


## Challenge 4

In our current directory, we want to find the 3 files which have the least number of lines. Which command listed below would work?

* `wc -l * > sort -n > head -n 3`
* `wc -l * | sort -n | head -n 1-3`
* `wc -l * | head -n 3 | sort -n`
* `wc -l * | sort -n | head -n 3`


## Challenge 5

A file called `animals.csv` (in the `shell-lesson-data/exercise-data/animal-counts` folder) contains the following data:

```
2012-11-05,deer,5
2012-11-05,rabbit,22
2012-11-05,raccoon,7
2012-11-06,rabbit,19
2012-11-06,deer,2
2012-11-06,fox,4
2012-11-07,rabbit,16
2012-11-07,bear,1
```

What text passes through each of the pipes and the final redirect in the pipeline below? Note, the `sort -r` command sorts in reverse order.

```
$ cat animals.csv | head -n 5 | tail -n 3 | sort -r > final.txt
```

<!-- Hint: build the pipeline up one command at a time to test your understanding -->


## Challenge 6

The `cut` command is used to remove or ‘cut out’ certain sections of each line in the file, and `cut` expects the lines to be separated into columns by a `[Tab]` character. A character used in this way is a called a *delimiter*. In the example below we use the `-d` option to specify the comma as our delimiter character. We have also used the `-f` option to specify that we want to extract the second field (column).

```
$ head -n 2 animals.csv
2012-11-05,deer,5
2012-11-05,rabbit,22

$ head -n 2 animals.csv | cut -d , -f 2
deer
rabbit
```

## Challenge 6 (cont)

For the file `animals.csv` from the previous exercise, consider the following command:

```
$ cut -d , -f 2 animals.csv
```

This gives the following output:

:::: {.columns}

::: {.column}
```
deer
rabbit
raccoon
rabbit
```
:::

::: {.column}
```
deer
fox
rabbit
bear
```
:::

::::

The `uniq` command filters out adjacent matching lines in a file. How could you extend this pipeline (using `uniq` and another command) to find out what animals the file contains (without any duplicates in their names)?

## Challenge 7

The file `animals.csv` contains 8 lines of data formatted as follows:

```
2012-11-05,deer,5
2012-11-05,rabbit,22
2012-11-05,raccoon,7
2012-11-06,rabbit,19
...
```

The `uniq` command has a `-c` option which gives a count of the number of times a line occurs in its input. Assuming your current directory is `shell-lesson-data/exercise-data/animal-counts`, what command would you use to produce a table that shows the total count of each type of animal in the file?


## Challenge 8

Suppose you want to delete your processed data files, and only keep your raw files and processing script to save storage. The raw files end in `.dat` and the processed files end in `.txt`. Which of the following would remove all the processed data files, and only the processed data files?

  * `rm ?.txt`
  * `rm *.txt`
  * `rm * .txt`
  * `rm *.*`
